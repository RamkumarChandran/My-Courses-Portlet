/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gnenc.internet.mycourses.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gnenc.internet.mycourses.model.UserEnrollment;
import org.gnenc.internet.mycourses.model.UserEnrollmentModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the UserEnrollment service. Represents a
 * row in the &quot;MC_UserEnrollment&quot; database table, with each column
 * mapped to a property of this class.
 * 
 * <p>
 * This implementation and its corresponding interface
 * {@link org.gnenc.internet.mycourses.model.UserEnrollmentModel} exist only as
 * a container for the default property accessors generated by ServiceBuilder.
 * Helper methods and all application logic should be put in
 * {@link UserEnrollmentImpl}.
 * </p>
 * 
 * <p>
 * Never modify or reference this class directly. All methods that expect a user
 * enrollment model instance should use the
 * {@link org.gnenc.internet.mycourses.model.UserEnrollment} interface instead.
 * </p>
 * 
 * @author Drew Blessing/Stephen Hunter
 * @see UserEnrollmentImpl
 * @see org.gnenc.internet.mycourses.model.UserEnrollment
 * @see org.gnenc.internet.mycourses.model.UserEnrollmentModel
 * @generated
 */
public class UserEnrollmentModelImpl extends BaseModelImpl<UserEnrollment>
		implements UserEnrollmentModel {
	public static final String TABLE_NAME = "MC_UserEnrollment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "courseId", new Integer(Types.BIGINT) },
			{ "lastRefresh", new Integer(Types.TIMESTAMP) } };
	public static final String TABLE_SQL_CREATE = "create table MC_UserEnrollment (id_ LONG not null primary key,userId LONG,courseId LONG,lastRefresh DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MC_UserEnrollment";
	public static final String ORDER_BY_JPQL = " ORDER BY userEnrollment.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MC_UserEnrollment.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil
			.getBoolean(
					com.liferay.util.service.ServiceProps
							.get("value.object.entity.cache.enabled.org.gnenc.internet.mycourses.model.UserEnrollment"),
					true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil
			.getBoolean(
					com.liferay.util.service.ServiceProps
							.get("value.object.finder.cache.enabled.org.gnenc.internet.mycourses.model.UserEnrollment"),
					true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil
			.getLong(com.liferay.util.service.ServiceProps
					.get("lock.expiration.time.org.gnenc.internet.mycourses.model.UserEnrollment"));

	public UserEnrollmentModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long pk) {
		setId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getCourseId() {
		return _courseId;
	}

	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	public Date getLastRefresh() {
		return _lastRefresh;
	}

	public void setLastRefresh(Date lastRefresh) {
		_lastRefresh = lastRefresh;
	}

	public UserEnrollment toEscapedModel() {
		if (isEscapedModel()) {
			return (UserEnrollment) this;
		} else {
			return (UserEnrollment) Proxy.newProxyInstance(
					UserEnrollment.class.getClassLoader(),
					new Class[] { UserEnrollment.class },
					new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					UserEnrollment.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		UserEnrollmentImpl userEnrollmentImpl = new UserEnrollmentImpl();

		userEnrollmentImpl.setId(getId());

		userEnrollmentImpl.setUserId(getUserId());

		userEnrollmentImpl.setCourseId(getCourseId());

		userEnrollmentImpl.setLastRefresh(getLastRefresh());

		return userEnrollmentImpl;
	}

	public int compareTo(UserEnrollment userEnrollment) {
		int value = 0;

		if (getUserId() < userEnrollment.getUserId()) {
			value = -1;
		} else if (getUserId() > userEnrollment.getUserId()) {
			value = 1;
		} else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserEnrollment userEnrollment = null;

		try {
			userEnrollment = (UserEnrollment) obj;
		} catch (ClassCastException cce) {
			return false;
		}

		long pk = userEnrollment.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		} else {
			return false;
		}
	}

	public int hashCode() {
		return (int) getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", lastRefresh=");
		sb.append(getLastRefresh());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.gnenc.internet.mycourses.model.UserEnrollment");
		sb.append("</model-name>");

		sb.append("<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>lastRefresh</column-name><column-value><![CDATA[");
		sb.append(getLastRefresh());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _id;
	private long _userId;
	private String _userUuid;
	private long _courseId;
	private Date _lastRefresh;
	private transient ExpandoBridge _expandoBridge;
}
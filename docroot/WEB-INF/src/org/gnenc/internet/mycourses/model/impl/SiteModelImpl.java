/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gnenc.internet.mycourses.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gnenc.internet.mycourses.model.Site;
import org.gnenc.internet.mycourses.model.SiteModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the Site service. Represents a row in the &quot;MC_Site&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gnenc.internet.mycourses.model.SiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SiteImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a site model instance should use the {@link org.gnenc.internet.mycourses.model.Site} interface instead.
 * </p>
 *
 * @author Drew Blessing/Stephen Hunter
 * @see SiteImpl
 * @see org.gnenc.internet.mycourses.model.Site
 * @see org.gnenc.internet.mycourses.model.SiteModel
 * @generated
 */
public class SiteModelImpl extends BaseModelImpl<Site> implements SiteModel {
	public static final String TABLE_NAME = "MC_Site";
	public static final Object[][] TABLE_COLUMNS = {
			{ "siteId", new Integer(Types.BIGINT) },
			{ "siteName", new Integer(Types.VARCHAR) },
			{ "url", new Integer(Types.VARCHAR) },
			{ "emailDomain", new Integer(Types.VARCHAR) },
			{ "dbServer", new Integer(Types.VARCHAR) },
			{ "dbName", new Integer(Types.VARCHAR) },
			{ "dbUser", new Integer(Types.VARCHAR) },
			{ "dbPass", new Integer(Types.VARCHAR) },
			{ "companyId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table MC_Site (siteId LONG not null primary key,siteName VARCHAR(75) null,url VARCHAR(75) null,emailDomain VARCHAR(75) null,dbServer VARCHAR(75) null,dbName VARCHAR(75) null,dbUser VARCHAR(75) null,dbPass VARCHAR(75) null,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table MC_Site";
	public static final String ORDER_BY_JPQL = " ORDER BY site.siteName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MC_Site.siteName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gnenc.internet.mycourses.model.Site"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gnenc.internet.mycourses.model.Site"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gnenc.internet.mycourses.model.Site"));

	public SiteModelImpl() {
	}

	public long getPrimaryKey() {
		return _siteId;
	}

	public void setPrimaryKey(long pk) {
		setSiteId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_siteId);
	}

	public long getSiteId() {
		return _siteId;
	}

	public void setSiteId(long siteId) {
		_siteId = siteId;
	}

	public String getSiteName() {
		if (_siteName == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteName;
		}
	}

	public void setSiteName(String siteName) {
		_siteName = siteName;
	}

	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	public void setUrl(String url) {
		_url = url;
	}

	public String getEmailDomain() {
		if (_emailDomain == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailDomain;
		}
	}

	public void setEmailDomain(String emailDomain) {
		_emailDomain = emailDomain;
	}

	public String getDbServer() {
		if (_dbServer == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbServer;
		}
	}

	public void setDbServer(String dbServer) {
		_dbServer = dbServer;
	}

	public String getDbName() {
		if (_dbName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbName;
		}
	}

	public void setDbName(String dbName) {
		_dbName = dbName;
	}

	public String getDbUser() {
		if (_dbUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbUser;
		}
	}

	public void setDbUser(String dbUser) {
		_dbUser = dbUser;
	}

	public String getDbPass() {
		if (_dbPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbPass;
		}
	}

	public void setDbPass(String dbPass) {
		_dbPass = dbPass;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public Site toEscapedModel() {
		if (isEscapedModel()) {
			return (Site)this;
		}
		else {
			return (Site)Proxy.newProxyInstance(Site.class.getClassLoader(),
				new Class[] { Site.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Site.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		SiteImpl siteImpl = new SiteImpl();

		siteImpl.setSiteId(getSiteId());

		siteImpl.setSiteName(getSiteName());

		siteImpl.setUrl(getUrl());

		siteImpl.setEmailDomain(getEmailDomain());

		siteImpl.setDbServer(getDbServer());

		siteImpl.setDbName(getDbName());

		siteImpl.setDbUser(getDbUser());

		siteImpl.setDbPass(getDbPass());

		siteImpl.setCompanyId(getCompanyId());

		return siteImpl;
	}

	public int compareTo(Site site) {
		int value = 0;

		value = getSiteName().toLowerCase()
					.compareTo(site.getSiteName().toLowerCase());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Site site = null;

		try {
			site = (Site)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = site.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{siteId=");
		sb.append(getSiteId());
		sb.append(", siteName=");
		sb.append(getSiteName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", emailDomain=");
		sb.append(getEmailDomain());
		sb.append(", dbServer=");
		sb.append(getDbServer());
		sb.append(", dbName=");
		sb.append(getDbName());
		sb.append(", dbUser=");
		sb.append(getDbUser());
		sb.append(", dbPass=");
		sb.append(getDbPass());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("org.gnenc.internet.mycourses.model.Site");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>siteId</column-name><column-value><![CDATA[");
		sb.append(getSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteName</column-name><column-value><![CDATA[");
		sb.append(getSiteName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailDomain</column-name><column-value><![CDATA[");
		sb.append(getEmailDomain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbServer</column-name><column-value><![CDATA[");
		sb.append(getDbServer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbName</column-name><column-value><![CDATA[");
		sb.append(getDbName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbUser</column-name><column-value><![CDATA[");
		sb.append(getDbUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbPass</column-name><column-value><![CDATA[");
		sb.append(getDbPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _siteId;
	private String _siteName;
	private String _url;
	private String _emailDomain;
	private String _dbServer;
	private String _dbName;
	private String _dbUser;
	private String _dbPass;
	private long _companyId;
	private transient ExpandoBridge _expandoBridge;
}